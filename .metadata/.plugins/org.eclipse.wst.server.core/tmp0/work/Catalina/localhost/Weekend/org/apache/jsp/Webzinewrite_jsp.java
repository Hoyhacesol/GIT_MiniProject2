/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-14 06:10:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Webzinewrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Chatgpt_1/miniproject2/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Weekend/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1744362981000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("        ");

    String contextPath = request.getContextPath();

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>위캔드 | 웹진 작성</title>\n");
      out.write("<link rel=\"icon\" sizes=\"256x256\" href=\"");
      out.print(contextPath);
      out.write("/img/Logo_50.png\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"https://uicdn.toast.com/editor/latest/toastui-editor.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(contextPath);
      out.write("/css/Style.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(contextPath);
      out.write("/css/Webzinewrite.css\" />\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n");
      out.write("<script src=\"https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js\"></script>\n");
      out.write("<script src=\"https://cdn.tailwindcss.com\"></script>\n");
      out.write("<script src=\"");
      out.print(contextPath);
      out.write("/js/Nav.js\"></script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body class=\"bg-gray-50\" >\n");
      out.write("\n");
      out.write("<!-- 사이트 제목 -->\n");
      out.write("    <div class=\"site_title\">\n");
      out.write("      <div class=\"title_logo\"><a href=\"#\"></a></div>\n");
      out.write("      <div class=\"title_wrap\">WEEKEND</div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <!-- 네비게이션 바 (비로그인/로그인) -->\n");
      out.write("    ");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<!-- 글쓰기 폼 -->\n");
      out.write("    <form name=\"writeForm\" method=\"post\" enctype=\"multipart/form-data\"\n");
      out.write("        action=\"");
      out.print( request.getContextPath() );
      out.write("/webzine/wwrite.do\"\n");
      out.write("        onsubmit=\"return validateForm(this);\">\n");
      out.write("\n");
      out.write("    <div class=\"max-w-3xl mx-auto mt-10 p-8 bg-white shadow-lg rounded-2xl\">\n");
      out.write("      <h2 class=\"text-3xl font-bold mb-6 text-gray-800\">웹진 작성</h2>\n");
      out.write("\n");
      out.write("      <!-- 카테고리 선택 -->\n");
      out.write("      <div class=\"flex gap-4 mb-4\">\n");
      out.write("        <select name=\"category\" class=\"border rounded-md p-4 w-1/4\">\n");
      out.write("          <option>카테고리 선택</option>\n");
      out.write("          <option>국내 여행지</option>\n");
      out.write("          <option>해외 여행지</option>\n");
      out.write("          <option>맛집 소개</option>\n");
      out.write("          <option>여행기</option>\n");
      out.write("          <option>기타 정보</option>\n");
      out.write("        </select>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      <!-- 제목 입력 -->\n");
      out.write("      <input type=\"text\" name=\"wtitle\"\n");
      out.write("             placeholder=\"제목을 입력해주세요\"\n");
      out.write("             class=\"w-full border rounded-md p-3 mb-4\"\n");
      out.write("             required />\n");
      out.write("\n");
      out.write("      <!-- WYSIWYG 에디터 -->\n");
      out.write("      <div class=\"border rounded-md p-3 mb-4 bg-gray-100\">\n");
      out.write("        <div id=\"editor\"></div>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      <!-- 숨겨진 textarea: 에디터 내용이 저장될 곳 -->\n");
      out.write("      <textarea name=\"wtext\" id=\"hiddenContent\" style=\"display:none;\"></textarea>\n");
      out.write("		\n");
      out.write("		<!-- 이미지 파일명 저장용 hidden input 추가 -->\n");
      out.write("	<input type=\"hidden\" name=\"imageFiles\" id=\"imageFiles\" />\n");
      out.write("\n");
      out.write("     <!-- 버튼 영역 -->\n");
      out.write("		<div class=\"flex justify-center items-center space-x-2 mt-6\">\n");
      out.write("  			<button type=\"submit\"\n");
      out.write("          			class=\"bg-orange-500 text-white px-6 py-2 rounded-md hover:bg-orange-500\">\n");
      out.write("    			등록\n");
      out.write("  			</button>\n");
      out.write("  			<button type=\"button\"\n");
      out.write("         		 onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/webzine/list.do';\"\n");
      out.write("         		 class=\"border px-6 py-2 rounded-md hover:bg-gray-100\">\n");
      out.write("    			취소\n");
      out.write("  			</button>\n");
      out.write("		</div>\n");
      out.write("      </div>\n");
      out.write("  </form>\n");
      out.write("<script>\n");
      out.write("  // 업로드된 이미지 파일명을 저장할 배열\n");
      out.write("  const uploadedImageFiles = [];\n");
      out.write("\n");
      out.write("  // Toast UI Editor 인스턴스 생성\n");
      out.write("  const editor = new toastui.Editor({\n");
      out.write("    el: document.querySelector('#editor'),\n");
      out.write("    height: '600px',\n");
      out.write("    initialEditType: 'wysiwyg',\n");
      out.write("    previewStyle: 'vertical',\n");
      out.write("    hooks: {\n");
      out.write("      addImageBlobHook: async (blob, callback) => {\n");
      out.write("        const formData = new FormData();\n");
      out.write("        formData.append('Wofile', blob); // input name과 일치해야 함\n");
      out.write("\n");
      out.write("        const response = await fetch('");
      out.print(contextPath);
      out.write("/webzine/imageupload.do', {\n");
      out.write("          method: 'POST',\n");
      out.write("          body: formData\n");
      out.write("        });\n");
      out.write("        const result = await response.json();\n");
      out.write("\n");
      out.write("        if (result.success === 1) {\n");
      out.write("          const imageUrl = result.url;\n");
      out.write("          const fileName = imageUrl.split('/').pop(); // 저장된 파일명 추출\n");
      out.write("\n");
      out.write("          uploadedImageFiles.push(fileName); // 배열에 저장\n");
      out.write("          callback(imageUrl, 'image alt text');\n");
      out.write("\n");
      out.write("          // hidden input에 이미지 파일명들 추가 (콤마로 구분된 문자열)\n");
      out.write("          const hiddenInput = document.getElementById('imageFiles');\n");
      out.write("          hiddenInput.value = uploadedImageFiles.join(',');\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("  });\n");
      out.write("\n");
      out.write("  // 폼 전송 전에 에디터 내용 textarea와 유효성 검사 처리\n");
      out.write("  function validateForm(form) {\n");
      out.write("    const content = editor.getHTML(); // 또는 getMarkdown()\n");
      out.write("    document.getElementById(\"hiddenContent\").value = content;\n");
      out.write("\n");
      out.write("    // 제목이 비어있는지 확인\n");
      out.write("    if (form.wtitle.value.trim() === \"\") {\n");
      out.write("      alert(\"제목을 입력해주세요.\");\n");
      out.write("      form.wtitle.focus();\n");
      out.write("      return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 내용이 비어있는지 확인\n");
      out.write("    if (content.trim() === \"\" || content === \"<p><br></p>\") {\n");
      out.write("      alert(\"내용을 입력해주세요.\");\n");
      out.write("      return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return true; // 유효성 통과 시 submit 진행\n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f0.setParent(null);
    int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
    if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write('\n');
        out.write(' ');
        out.write(' ');
        if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write('\n');
        out.write(' ');
        out.write(' ');
        if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write('\n');
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /Webzinewrite.jsp(32,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.loginUser}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
    if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("    ");
        org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Header2.jsp", out, false);
        out.write('\n');
        out.write(' ');
        out.write(' ');
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("    ");
        org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Header.jsp", out, false);
        out.write('\n');
        out.write(' ');
        out.write(' ');
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
    return false;
  }
}
